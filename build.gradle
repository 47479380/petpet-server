import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.10'

    id 'net.mamoe.mirai-console' version '2.11.0'
}

apply plugin: "maven-publish"
apply plugin: "java"


group = 'xmmt.dituon'
version = '3.8'

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3"
    testImplementation "junit:junit:4.11"
    implementation 'com.hellokaton:blade-core:2.1.2.RELEASE'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
mirai { jvmTarget = JavaVersion.VERSION_11 }

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}


artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // useless for jitpack: groupId = GROUP
            artifactId = "petpet-share"
            // useless for jitpack: version = VERSION

            from components.java
        }
    }
}

jar {



    archiveFileName="petpet.jar"
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': 'xmmt.dituon.server.WebServer'
    }
    from {
        (configurations.runtimeClasspath).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

}
//复制data目录
task copyDataDir(type: Copy) {
    from new File(getProjectDir(),"data")
    into new File(getBuildDir(),"libs\\data")
    include '**/*'
    exclude { details -> details.file.name.endsWith('.html') &&
            details.file.text.contains('staging') }
}
test {
    filter {
        //exclude all tests from a package.
        excludeTestsMatching "xmmt.dituon.example.*"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
